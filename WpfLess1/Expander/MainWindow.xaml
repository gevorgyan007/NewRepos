<Window x:Class="Expander.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Expander"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <StackPanel>
        <Expander Header="Expander 1" IsExpanded="False" Margin="5" Padding="3" BorderBrush="Yellow">
            <Button > Button 1 </Button>
        </Expander>
        
        <Expander Header="Expander 2" IsExpanded="True" Margin="5" Padding="3" BorderBrush="Black">
            <TextBox TextWrapping="Wrap" IsReadOnly="True" VerticalScrollBarVisibility="Auto">
                User Controls provide a way to collect and combine different built-in controls together and package them into re-usable XAML. User controls are used in following scenarios −
                If the control consists of existing controls, i.e., you can create a single control of multiple, already existing controls.
                If the control doesn't need support for theming. User Controls do not support complex customization, control templates, and difficult to style.
                If a developer prefers to write controls using the code-behind model where a view and then a direct code behind for event handlers.
                You won't be sharing your control across applications.
                User Controls provide a way to collect and combine different built-in controls together and package them into re-usable XAML. User controls are used in following scenarios −
                If the control consists of existing controls, i.e., you can create a single control of multiple, already existing controls.
                If the control doesn't need support for theming. User Controls do not support complex customization, control templates, and difficult to style.
                If a developer prefers to write controls using the code-behind model where a view and then a direct code behind for event handlers.
                You won't be sharing your control across applications.
            </TextBox>
        </Expander>
        <Expander Header="Expander 1" IsExpanded="False" Margin="5" Padding="3" BorderBrush="Yellow">
            <Button >Button 1</Button>
        </Expander>
        <Expander Header="Expander 1"  IsExpanded="False" Margin="5" Padding="3" BorderBrush="Yellow">
            <Border Width="200" Background="LightCoral"
                    BorderBrush="Gray"
                    BorderThickness="3"
                    CornerRadius="10,20,45,40"
                    Padding="15"
                    Margin="15">
                <Button BorderBrush="LightCoral" Width="120"  Background="LightCoral">Button 1</Button>
            </Border>
            
        </Expander>
    </StackPanel>
</Window>
